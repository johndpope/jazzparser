<?xml version="1.0" encoding="UTF-8"?>
<!-- 
Copyright (C) 2003 University of Edinburgh (Michael White)
This version adapted by Mark Wilding (University of Edinburgh) 
$From revision: 1.4 $, $Date: 2004/10/05 11:01:40 $
$Revision: 0.1 $, $Date: 2008/04/21 $ 
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <xsd:annotation>
  <xsd:documentation>
    Schema for combinatory rules file.
	  This schema is based on the OpenCCG one and adapted for the
	  Jazz Parser. Added are the syncategorematic rules suggested by 
	  Mark Steedman for parsing chord sequences.
    
    A rules file specifies the combinatory rules to use.
    These rules include the (potentially) universal set of application, 
    composition, type raising and substitution rules; they are only 
    "potentially" universal because for efficiency one might want to 
    use a restricted subset of the rules, and because the type raising 
    rules are defined to work with specific, configurable argument and 
    result types.
    
    The rules file may also specify unary type changing rules, which 
    may be thought of as signs for zero morphemes, and thus conceptually 
    belonging to the lexicon rather than to the (potentially) universal 
    rule set.  They are defined in the rules file since, algorithmically, 
    they are handled at the same time as the other combinatory rules.
  </xsd:documentation>
  </xsd:annotation>

  <xsd:include schemaLocation="categories.xsd"/>
  
  
  <xsd:element name="rules">
    <xsd:annotation>
    <xsd:documentation>
      The root element.
    </xsd:documentation>
    </xsd:annotation>
    
    <xsd:complexType>
      <xsd:sequence>

        <xsd:element name="application" minOccurs="0" maxOccurs="2">
          <xsd:annotation>
          <xsd:documentation>
            Application, e.g. X/Y Y => X.
          </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
            <xsd:attribute ref="dir" use="required"/>
            <xsd:attribute name="version" type="xsd:positiveInteger"/>
          </xsd:complexType>
        </xsd:element>

        <xsd:element name="composition" minOccurs="0" maxOccurs="4">
          <xsd:annotation>
          <xsd:documentation>
            Composition, e.g. X/Y Y/Z => X/Z.
          </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
            <xsd:attribute ref="dir" use="required"/>
            <xsd:attribute ref="harmonic" use="required"/>
            <xsd:attribute name="version" type="xsd:positiveInteger"/>
          </xsd:complexType>
        </xsd:element>

		  <!-- We have rules like type raising to allow cadences to be interpreted -->
		<xsd:element name="cadenceraising" type="cadenceraisingType" minOccurs="0" maxOccurs="unbounded">
			<xsd:annotation>
			<xsd:documentation>
				Cadence raising. This is quite like type raising and creates
				the category that constructs cadences from their target
				chord.
				The attribute modal_cadence should be set to "true" if cadential
				categories (i.e. the first argument to the result of this 
				rule) should be required to have the cadential, "c", mode
				on their slash. This defaults to false.
			</xsd:documentation>
			</xsd:annotation>
            <xsd:complexType>
              <xsd:attribute name="version" type="xsd:positiveInteger"/>
            </xsd:complexType>
		</xsd:element>
		  
        <xsd:element name="plagalcadenceraising" type="plagalcadenceraisingType" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
            <xsd:documentation>
                Cadence raising for plagal cadences. 
				This is quite like type raising and creates
                the category that constructs cadences from their target
                chord.
                The attribute modal_cadence should be set to "true" if cadential
                categories (i.e. the first argument to the result of this 
                rule) should be required to have the cadential, "c", mode
                on their slash. This defaults to false.
            </xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:attribute name="version" type="xsd:positiveInteger"/>
            </xsd:complexType>
		</xsd:element>

		  <!--
        <xsd:element name="substitution" minOccurs="0" maxOccurs="4">
          <xsd:annotation>
          <xsd:documentation>
            Substitution, e.g. X/Y/Z Y/Z => X/Z.
          </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
            <xsd:attribute ref="dir" use="required"/>
            <xsd:attribute ref="harmonic" use="required"/>
          </xsd:complexType>
        </xsd:element>
			  -->

        <xsd:element name="coordination" minOccurs="0" maxOccurs="2">
          <xsd:annotation>
          <xsd:documentation>
            Coordination of repeated categories, e.g. X X => X.
			  This should no longer be used. It was for an old grammar
			  and is now recognised to be rubbish.
            Coordination has a new meaning and is once again useful.
              It should be used with version=2 to ensure this 
              new behaviour is used.
          </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
            <xsd:attribute ref="seventh" use="required"/>
          </xsd:complexType>
          <xsd:complexType>
            <xsd:attribute name="version" type="xsd:positiveInteger"/>
          </xsd:complexType>
        </xsd:element>

      </xsd:sequence>
      
      <xsd:attribute name="name" type="xsd:string"/>
    </xsd:complexType>
  </xsd:element>

  
  <xsd:attribute name="dir">
    <xsd:annotation>
    <xsd:documentation>
      Specifies the direction of the rule.
      With forward combination, the functor appears on the left; 
      with backward combination, it appears on the right.
    </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="forward"/>
        <xsd:enumeration value="backward"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:attribute>
	
	<!-- This was for the coordination rule, which has been 
		abandoned. This isn't used any more. -->
  <xsd:attribute name="seventh">
    <xsd:annotation>
    <xsd:documentation>
      Specifies whether the input to a rule must be a dominant seventh
      chord.
	  Values allowed are "no", meaning it doesn't have to be, or 
	  "required_right", meaning the rightmost chord of the input
	  must be a dom7.
	  More allowed values may be added in the future.
    </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="no"/>
        <xsd:enumeration value="required_right"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:attribute>
  
  <xsd:attribute name="harmonic" type="xsd:boolean">
    <xsd:annotation>
    <xsd:documentation>
      Specifies whether the rule is harmonic (true) or permutative (false).
    </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>

  
  <xsd:complexType name="cadenceraisingType">
    <xsd:annotation>
    <xsd:documentation>
      Cadence raising, e.g. X => (I\I)\(Y7/I7)
    </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="arg" type="atomcatContainer" minOccurs="0"/>
      <xsd:element name="result" type="atomcatContainer" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute ref="dir" use="required"/>
    <xsd:attribute ref="modal_cadence"/>
    <xsd:attribute ref="modulating"/>
  </xsd:complexType>
	
	
  <xsd:complexType name="plagalcadenceraisingType">
    <xsd:annotation>
    <xsd:documentation>
      Cadence raising for plagal cadences, e.g. X => (I\I)\(Y/I)
    </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="arg" type="atomcatContainer" minOccurs="0"/>
      <xsd:element name="result" type="atomcatContainer" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute ref="dir" use="required"/>
    <xsd:attribute ref="modal_cadence"/>
    <xsd:attribute ref="modulating"/>
  </xsd:complexType>


  <xsd:complexType name="atomcatContainer">
    <xsd:sequence>
      <xsd:element ref="atomcat"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="categoryContainer">
    <xsd:sequence>
      <xsd:element ref="category"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:attribute name="modulating" type="xsd:boolean">
    <xsd:annotation>
    <xsd:documentation>
      Specifies whether the rule enforces a categorical equality between
        the origin and target of the cadences. If true the equality is 
        not enforced and cadences are free to modulate all over the shop.
      Defaults to false, for backwards compatibility.
    </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
  
  <xsd:attribute name="modal_cadence" type="xsd:boolean">
    <xsd:annotation>
    <xsd:documentation>
      Specifies whether cadential slash modes are used to limit the number
		of false interpretations of plagal (and, for consistency, perfect)
		cadences.
    </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
  
</xsd:schema>


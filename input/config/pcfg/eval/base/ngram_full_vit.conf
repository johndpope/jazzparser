# Config for jazzparser
# Uses a trained model to evaluate all sequences in all partitions of the data.
# Use one of the scripts that inherits from this
# This evaluation combines the ngram tagger with the pcfg parser.

# Must be included in another file
# The inheriting file should define model_name, tagger_model_name and suffix
%% ABSTRACT

# Input sequences
file           = %{PROJECT_ROOT}/input/fullseqs
filetype       = bulk-db

# Tagger type
supertagger    = ngram-multi
# Increase the tagger beam with over the default
tagger-options = batch=0.1:model=%{tagger_model_name}

# Divide into 10 partitions
partitions     = 10
# Use the pcfg parser
parser         = pcfg
# Stop after 3h if we've not found anything
# Set quite a tight beam, so we can get a result in the time
parser-options = model=%{model_name}:timeout=600:threshold=0.01:maxarc=10:viterbi=T

# Output parse results to a file
output      = %{PROJECT_ROOT}/etc/output/pcfg/vit/%{model_name}/%{tagger_model_name}/
# Output progress info to a file
logger      = %{PROJECT_ROOT}/etc/tmp/pcfg/vit/%{model_name}/%{tagger_model_name}/
# Limit the output to the top 10 results
topn        = 10

# Spawn multiple processes - as many as there are sequences
# This means we do the whole lot in parallel, so don't suffer from 
#  the odd very long running one
processes   = 8          # -1 means the number of sequences

+no-results

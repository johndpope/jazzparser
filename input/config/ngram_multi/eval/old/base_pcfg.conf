# Config for bin/models/eval.py
# Cross evaluation of a trained bigram-multi model in combination with the 
#  PCCG parsing model.
# Use one of the scripts that inherits from this:
#  pcfg.conf
# (only one so far)
# Uses multiprocessing

# Must be included in another file
# The inheriting file should define pcfg_model_name and suffix
%% ABSTRACT

# Tagger type
%% ARG 0 bigram-multi
# Model name: this is the tagger's model
%% ARG 1 chords
# Input sequences
%% ARG 2 %{PROJECT_ROOT}/input/fullseqs

# Divide into 10 partitions
partitions  = 10
# Use the pcfg parser
parser      = pcfg
# Specify the model basename for the parser
# This should have been given in the inheriting file
parser-model   = %{pcfg_model_name}
# Stop after 5h if we've not found anything
# Set quite a tight beam, so we can get a result in the time
# Force the parser not to use lexical probabilities with this supertagger
parser-options = timeout=300:threshold=0.05:maxarc=30:nolex=True

# Output parse results to a file
output      = %{PROJECT_ROOT}/etc/output/pcfg/bigram_multi/output-%{suffix}-
# Output progress info to a file
progress-out= %{PROJECT_ROOT}/etc/tmp/pcfg/bigram_multi/progress-%{suffix}-

# Output accuracy values, not TS distance
+accuracy
# Spawn up to 8 processes
+multiprocessing
processes   = 8          # -1 means the number of sequences
start-delay = 10         # Wait 10 seconds between starting each process
